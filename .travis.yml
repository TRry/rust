# Use something that's not 'ruby' so we don't set up things like
# RVM/bundler/ruby and whatnot. Right now 'rust' isn't a language on travis and
# it treats unknown languages as ruby-like I believe.
language: objective-c

os:
  - osx

install:
  - curl -L -O https://github.com/vhbit/rust-llvm/releases/download/travis002/long_travis.py
  - curl -L -O https://github.com/vhbit/rust-llvm/releases/download/travis003/llvm-snapshot.tar.gz
  - tar xzf llvm-snapshot.tar.gz
  
# Configure for device and simulator build
before_script:
  - ./configure --disable-optimize-tests --enable-fast-make --target=$TEST_TARGET --disable-debug --disable-docs --llvm-root=`pwd`/local-llvm --disable-verify-install

# Just test if compile with arm-apple-ios and i386-apple-ios
# finishes. Unfortunately there is no way to check if it actually
# works as, you know, the only fragile part is device itself and
# there is no way to actually emulate it
script: 
  - python long_travis.py make -j2 

env:
  global:
    - NO_BENCH=1
  matrix:
    - TEST_TARGET=arm-apple-ios
    - TEST_TARGET=i386-apple-ios

# We track this ourselves, and in theory we don't have to update the LLVM repo
# (but sadly we do right now anyway).
git:
  submodules: false

# Real testing happens on http://buildbot.rust-lang.org/
#
# See https://github.com/rust-lang/rust-buildbot
#     CONTRIBUTING.md#pull-requests

notifications:
    webhooks:
        - http://rust-bios.herokuapp.com
    #  email: false

# ios branch itself is skipped because it should have only 
# merge from proven commits
branches:
    only:
        - /^ios-[0-9a-f]{7}$/
        - ios-travis
        - ios-auto
